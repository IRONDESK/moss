// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

//Schemas
model User {
  id                Int        @id @default(autoincrement())
  username          String
  userId            String?    @unique
  password          String?
  email             String?    @unique
  phone             String?    @unique
  avatar            String?
  location          String?
  Token             Token[]
  Study             Study[]
  Schedule          Schedule[]
  StudySchedule     StudySchedule[]
  Notice            Notice[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  // StudyTodo StudyTodo[]
}

model Schedule {
  id          Int      @id @default(autoincrement())
  title       String
  date        String
  content     String?
  user        User     @relation(fields: [UserId], references: [id], onDelete: Cascade)
  UserId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [UserId], references: [id], onDelete: Cascade)
  UserId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Study {
  id               Int            @id @default(autoincrement())
  user             User           @relation(fields: [UserId], references: [id], onDelete: Cascade)
  UserId           Int
  studyName        String
  introduce        String?
  category         String?
  tag              String?
  membersLimit     String?
  chatLink         String?
  image            String?
  joinMsg          String?
  joinMember       Json?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  StudySchedule    StudySchedule[]
  StudyTodo        StudyTodo[]
  notice           Notice[]
}
model StudySchedule {
  id          Int      @id @default(autoincrement())
  date        String
  startTime   String?
  endTime     String?
  content     String
  user        User     @relation(fields: [UserId], references: [id], onDelete: Cascade)
  UserId      Int
  study       Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
  studyId     Int      
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Todo {
  id            Int           @id @default(autoincrement())
  title         String        @db.VarChar(100)
  completed     Boolean       @default(false)
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt
}

model StudyTodo {
  id           Int        @id @default(autoincrement())
  title        String     @db.VarChar(100)
  completed    Boolean    @default(false)
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @updatedAt
  study        Study      @relation(fields: [studyId], references: [id], onDelete: Cascade)
  studyId      Int
  // User      User?     @relation(fields: [userId], references: [id])
  // userId    Int?
}

model Notice {
  id        Int      @id @default(autoincrement()) 
  category  String
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int 
  study     Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
  studyId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
